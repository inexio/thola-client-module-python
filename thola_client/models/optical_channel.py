# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class OpticalChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'str',
        'rx_power': 'float',
        'tx_power': 'float'
    }

    attribute_map = {
        'channel': 'channel',
        'rx_power': 'rx_power',
        'tx_power': 'tx_power'
    }

    def __init__(self, channel=None, rx_power=None, tx_power=None, _configuration=None):  # noqa: E501
        """OpticalChannel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._channel = None
        self._rx_power = None
        self._tx_power = None
        self.discriminator = None

        if channel is not None:
            self.channel = channel
        if rx_power is not None:
            self.rx_power = rx_power
        if tx_power is not None:
            self.tx_power = tx_power

    @property
    def channel(self):
        """Gets the channel of this OpticalChannel.  # noqa: E501


        :return: The channel of this OpticalChannel.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this OpticalChannel.


        :param channel: The channel of this OpticalChannel.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def rx_power(self):
        """Gets the rx_power of this OpticalChannel.  # noqa: E501


        :return: The rx_power of this OpticalChannel.  # noqa: E501
        :rtype: float
        """
        return self._rx_power

    @rx_power.setter
    def rx_power(self, rx_power):
        """Sets the rx_power of this OpticalChannel.


        :param rx_power: The rx_power of this OpticalChannel.  # noqa: E501
        :type: float
        """

        self._rx_power = rx_power

    @property
    def tx_power(self):
        """Gets the tx_power of this OpticalChannel.  # noqa: E501


        :return: The tx_power of this OpticalChannel.  # noqa: E501
        :rtype: float
        """
        return self._tx_power

    @tx_power.setter
    def tx_power(self, tx_power):
        """Sets the tx_power of this OpticalChannel.


        :param tx_power: The tx_power of this OpticalChannel.  # noqa: E501
        :type: float
        """

        self._tx_power = tx_power

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpticalChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpticalChannel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpticalChannel):
            return True

        return self.to_dict() != other.to_dict()
