# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class Thresholds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical_max': 'object',
        'critical_min': 'object',
        'warning_max': 'object',
        'warning_min': 'object'
    }

    attribute_map = {
        'critical_max': 'criticalMax',
        'critical_min': 'criticalMin',
        'warning_max': 'warningMax',
        'warning_min': 'warningMin'
    }

    def __init__(self, critical_max=None, critical_min=None, warning_max=None, warning_min=None, _configuration=None):  # noqa: E501
        """Thresholds - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._critical_max = None
        self._critical_min = None
        self._warning_max = None
        self._warning_min = None
        self.discriminator = None

        if critical_max is not None:
            self.critical_max = critical_max
        if critical_min is not None:
            self.critical_min = critical_min
        if warning_max is not None:
            self.warning_max = warning_max
        if warning_min is not None:
            self.warning_min = warning_min

    @property
    def critical_max(self):
        """Gets the critical_max of this Thresholds.  # noqa: E501


        :return: The critical_max of this Thresholds.  # noqa: E501
        :rtype: object
        """
        return self._critical_max

    @critical_max.setter
    def critical_max(self, critical_max):
        """Sets the critical_max of this Thresholds.


        :param critical_max: The critical_max of this Thresholds.  # noqa: E501
        :type: object
        """

        self._critical_max = critical_max

    @property
    def critical_min(self):
        """Gets the critical_min of this Thresholds.  # noqa: E501


        :return: The critical_min of this Thresholds.  # noqa: E501
        :rtype: object
        """
        return self._critical_min

    @critical_min.setter
    def critical_min(self, critical_min):
        """Sets the critical_min of this Thresholds.


        :param critical_min: The critical_min of this Thresholds.  # noqa: E501
        :type: object
        """

        self._critical_min = critical_min

    @property
    def warning_max(self):
        """Gets the warning_max of this Thresholds.  # noqa: E501


        :return: The warning_max of this Thresholds.  # noqa: E501
        :rtype: object
        """
        return self._warning_max

    @warning_max.setter
    def warning_max(self, warning_max):
        """Sets the warning_max of this Thresholds.


        :param warning_max: The warning_max of this Thresholds.  # noqa: E501
        :type: object
        """

        self._warning_max = warning_max

    @property
    def warning_min(self):
        """Gets the warning_min of this Thresholds.  # noqa: E501


        :return: The warning_min of this Thresholds.  # noqa: E501
        :rtype: object
        """
        return self._warning_min

    @warning_min.setter
    def warning_min(self, warning_min):
        """Sets the warning_min of this Thresholds.


        :param warning_min: The warning_min of this Thresholds.  # noqa: E501
        :type: object
        """

        self._warning_min = warning_min

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Thresholds, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Thresholds):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Thresholds):
            return True

        return self.to_dict() != other.to_dict()
