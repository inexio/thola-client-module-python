# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class SBCComponentAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_active_sessions_inbound': 'int',
        'current_active_sessions_outbound': 'int',
        'current_session_rate_inbound': 'int',
        'current_session_rate_outbound': 'int',
        'hostname': 'str',
        'period_asr': 'int',
        'status': 'int'
    }

    attribute_map = {
        'current_active_sessions_inbound': 'current_active_sessions_inbound',
        'current_active_sessions_outbound': 'current_active_sessions_outbound',
        'current_session_rate_inbound': 'current_session_rate_inbound',
        'current_session_rate_outbound': 'current_session_rate_outbound',
        'hostname': 'hostname',
        'period_asr': 'period_asr',
        'status': 'status'
    }

    def __init__(self, current_active_sessions_inbound=None, current_active_sessions_outbound=None, current_session_rate_inbound=None, current_session_rate_outbound=None, hostname=None, period_asr=None, status=None, _configuration=None):  # noqa: E501
        """SBCComponentAgent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_active_sessions_inbound = None
        self._current_active_sessions_outbound = None
        self._current_session_rate_inbound = None
        self._current_session_rate_outbound = None
        self._hostname = None
        self._period_asr = None
        self._status = None
        self.discriminator = None

        if current_active_sessions_inbound is not None:
            self.current_active_sessions_inbound = current_active_sessions_inbound
        if current_active_sessions_outbound is not None:
            self.current_active_sessions_outbound = current_active_sessions_outbound
        if current_session_rate_inbound is not None:
            self.current_session_rate_inbound = current_session_rate_inbound
        if current_session_rate_outbound is not None:
            self.current_session_rate_outbound = current_session_rate_outbound
        if hostname is not None:
            self.hostname = hostname
        if period_asr is not None:
            self.period_asr = period_asr
        if status is not None:
            self.status = status

    @property
    def current_active_sessions_inbound(self):
        """Gets the current_active_sessions_inbound of this SBCComponentAgent.  # noqa: E501


        :return: The current_active_sessions_inbound of this SBCComponentAgent.  # noqa: E501
        :rtype: int
        """
        return self._current_active_sessions_inbound

    @current_active_sessions_inbound.setter
    def current_active_sessions_inbound(self, current_active_sessions_inbound):
        """Sets the current_active_sessions_inbound of this SBCComponentAgent.


        :param current_active_sessions_inbound: The current_active_sessions_inbound of this SBCComponentAgent.  # noqa: E501
        :type: int
        """

        self._current_active_sessions_inbound = current_active_sessions_inbound

    @property
    def current_active_sessions_outbound(self):
        """Gets the current_active_sessions_outbound of this SBCComponentAgent.  # noqa: E501


        :return: The current_active_sessions_outbound of this SBCComponentAgent.  # noqa: E501
        :rtype: int
        """
        return self._current_active_sessions_outbound

    @current_active_sessions_outbound.setter
    def current_active_sessions_outbound(self, current_active_sessions_outbound):
        """Sets the current_active_sessions_outbound of this SBCComponentAgent.


        :param current_active_sessions_outbound: The current_active_sessions_outbound of this SBCComponentAgent.  # noqa: E501
        :type: int
        """

        self._current_active_sessions_outbound = current_active_sessions_outbound

    @property
    def current_session_rate_inbound(self):
        """Gets the current_session_rate_inbound of this SBCComponentAgent.  # noqa: E501


        :return: The current_session_rate_inbound of this SBCComponentAgent.  # noqa: E501
        :rtype: int
        """
        return self._current_session_rate_inbound

    @current_session_rate_inbound.setter
    def current_session_rate_inbound(self, current_session_rate_inbound):
        """Sets the current_session_rate_inbound of this SBCComponentAgent.


        :param current_session_rate_inbound: The current_session_rate_inbound of this SBCComponentAgent.  # noqa: E501
        :type: int
        """

        self._current_session_rate_inbound = current_session_rate_inbound

    @property
    def current_session_rate_outbound(self):
        """Gets the current_session_rate_outbound of this SBCComponentAgent.  # noqa: E501


        :return: The current_session_rate_outbound of this SBCComponentAgent.  # noqa: E501
        :rtype: int
        """
        return self._current_session_rate_outbound

    @current_session_rate_outbound.setter
    def current_session_rate_outbound(self, current_session_rate_outbound):
        """Sets the current_session_rate_outbound of this SBCComponentAgent.


        :param current_session_rate_outbound: The current_session_rate_outbound of this SBCComponentAgent.  # noqa: E501
        :type: int
        """

        self._current_session_rate_outbound = current_session_rate_outbound

    @property
    def hostname(self):
        """Gets the hostname of this SBCComponentAgent.  # noqa: E501


        :return: The hostname of this SBCComponentAgent.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SBCComponentAgent.


        :param hostname: The hostname of this SBCComponentAgent.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def period_asr(self):
        """Gets the period_asr of this SBCComponentAgent.  # noqa: E501


        :return: The period_asr of this SBCComponentAgent.  # noqa: E501
        :rtype: int
        """
        return self._period_asr

    @period_asr.setter
    def period_asr(self, period_asr):
        """Sets the period_asr of this SBCComponentAgent.


        :param period_asr: The period_asr of this SBCComponentAgent.  # noqa: E501
        :type: int
        """

        self._period_asr = period_asr

    @property
    def status(self):
        """Gets the status of this SBCComponentAgent.  # noqa: E501


        :return: The status of this SBCComponentAgent.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SBCComponentAgent.


        :param status: The status of this SBCComponentAgent.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SBCComponentAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SBCComponentAgent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SBCComponentAgent):
            return True

        return self.to_dict() != other.to_dict()
