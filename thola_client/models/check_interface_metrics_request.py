# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class CheckInterfaceMetricsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_data': 'DeviceData',
        'if_name_filter': 'list[str]',
        'if_type_filter': 'list[str]',
        'json_metrics': 'bool',
        'print_interfaces': 'bool',
        'print_performance_data': 'bool',
        'timeout': 'int'
    }

    attribute_map = {
        'device_data': 'device_data',
        'if_name_filter': 'ifName_filter',
        'if_type_filter': 'ifType_filter',
        'json_metrics': 'json_metrics',
        'print_interfaces': 'print_interfaces',
        'print_performance_data': 'print_performance_data',
        'timeout': 'timeout'
    }

    def __init__(self, device_data=None, if_name_filter=None, if_type_filter=None, json_metrics=None, print_interfaces=None, print_performance_data=None, timeout=None, _configuration=None):  # noqa: E501
        """CheckInterfaceMetricsRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_data = None
        self._if_name_filter = None
        self._if_type_filter = None
        self._json_metrics = None
        self._print_interfaces = None
        self._print_performance_data = None
        self._timeout = None
        self.discriminator = None

        if device_data is not None:
            self.device_data = device_data
        if if_name_filter is not None:
            self.if_name_filter = if_name_filter
        if if_type_filter is not None:
            self.if_type_filter = if_type_filter
        if json_metrics is not None:
            self.json_metrics = json_metrics
        if print_interfaces is not None:
            self.print_interfaces = print_interfaces
        if print_performance_data is not None:
            self.print_performance_data = print_performance_data
        if timeout is not None:
            self.timeout = timeout

    @property
    def device_data(self):
        """Gets the device_data of this CheckInterfaceMetricsRequest.  # noqa: E501


        :return: The device_data of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: DeviceData
        """
        return self._device_data

    @device_data.setter
    def device_data(self, device_data):
        """Sets the device_data of this CheckInterfaceMetricsRequest.


        :param device_data: The device_data of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: DeviceData
        """

        self._device_data = device_data

    @property
    def if_name_filter(self):
        """Gets the if_name_filter of this CheckInterfaceMetricsRequest.  # noqa: E501


        :return: The if_name_filter of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._if_name_filter

    @if_name_filter.setter
    def if_name_filter(self, if_name_filter):
        """Sets the if_name_filter of this CheckInterfaceMetricsRequest.


        :param if_name_filter: The if_name_filter of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: list[str]
        """

        self._if_name_filter = if_name_filter

    @property
    def if_type_filter(self):
        """Gets the if_type_filter of this CheckInterfaceMetricsRequest.  # noqa: E501


        :return: The if_type_filter of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._if_type_filter

    @if_type_filter.setter
    def if_type_filter(self, if_type_filter):
        """Sets the if_type_filter of this CheckInterfaceMetricsRequest.


        :param if_type_filter: The if_type_filter of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: list[str]
        """

        self._if_type_filter = if_type_filter

    @property
    def json_metrics(self):
        """Gets the json_metrics of this CheckInterfaceMetricsRequest.  # noqa: E501


        :return: The json_metrics of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._json_metrics

    @json_metrics.setter
    def json_metrics(self, json_metrics):
        """Sets the json_metrics of this CheckInterfaceMetricsRequest.


        :param json_metrics: The json_metrics of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: bool
        """

        self._json_metrics = json_metrics

    @property
    def print_interfaces(self):
        """Gets the print_interfaces of this CheckInterfaceMetricsRequest.  # noqa: E501


        :return: The print_interfaces of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._print_interfaces

    @print_interfaces.setter
    def print_interfaces(self, print_interfaces):
        """Sets the print_interfaces of this CheckInterfaceMetricsRequest.


        :param print_interfaces: The print_interfaces of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: bool
        """

        self._print_interfaces = print_interfaces

    @property
    def print_performance_data(self):
        """Gets the print_performance_data of this CheckInterfaceMetricsRequest.  # noqa: E501


        :return: The print_performance_data of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._print_performance_data

    @print_performance_data.setter
    def print_performance_data(self, print_performance_data):
        """Sets the print_performance_data of this CheckInterfaceMetricsRequest.


        :param print_performance_data: The print_performance_data of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: bool
        """

        self._print_performance_data = print_performance_data

    @property
    def timeout(self):
        """Gets the timeout of this CheckInterfaceMetricsRequest.  # noqa: E501

        Timeout for the request (0 => no timeout)  # noqa: E501

        :return: The timeout of this CheckInterfaceMetricsRequest.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CheckInterfaceMetricsRequest.

        Timeout for the request (0 => no timeout)  # noqa: E501

        :param timeout: The timeout of this CheckInterfaceMetricsRequest.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckInterfaceMetricsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckInterfaceMetricsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckInterfaceMetricsRequest):
            return True

        return self.to_dict() != other.to_dict()
