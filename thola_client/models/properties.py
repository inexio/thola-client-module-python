# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class Properties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'model_series': 'str',
        'os_version': 'str',
        'serial_number': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'model': 'model',
        'model_series': 'model_series',
        'os_version': 'os_version',
        'serial_number': 'serial_number',
        'vendor': 'vendor'
    }

    def __init__(self, model=None, model_series=None, os_version=None, serial_number=None, vendor=None, _configuration=None):  # noqa: E501
        """Properties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._model = None
        self._model_series = None
        self._os_version = None
        self._serial_number = None
        self._vendor = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if model_series is not None:
            self.model_series = model_series
        if os_version is not None:
            self.os_version = os_version
        if serial_number is not None:
            self.serial_number = serial_number
        if vendor is not None:
            self.vendor = vendor

    @property
    def model(self):
        """Gets the model of this Properties.  # noqa: E501

        Model of the device.  # noqa: E501

        :return: The model of this Properties.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Properties.

        Model of the device.  # noqa: E501

        :param model: The model of this Properties.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def model_series(self):
        """Gets the model_series of this Properties.  # noqa: E501

        ModelSeries of the device.  # noqa: E501

        :return: The model_series of this Properties.  # noqa: E501
        :rtype: str
        """
        return self._model_series

    @model_series.setter
    def model_series(self, model_series):
        """Sets the model_series of this Properties.

        ModelSeries of the device.  # noqa: E501

        :param model_series: The model_series of this Properties.  # noqa: E501
        :type: str
        """

        self._model_series = model_series

    @property
    def os_version(self):
        """Gets the os_version of this Properties.  # noqa: E501

        OSVersion of the device.  # noqa: E501

        :return: The os_version of this Properties.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Properties.

        OSVersion of the device.  # noqa: E501

        :param os_version: The os_version of this Properties.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def serial_number(self):
        """Gets the serial_number of this Properties.  # noqa: E501

        SerialNumber of the device.  # noqa: E501

        :return: The serial_number of this Properties.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Properties.

        SerialNumber of the device.  # noqa: E501

        :param serial_number: The serial_number of this Properties.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def vendor(self):
        """Gets the vendor of this Properties.  # noqa: E501

        Vendor of the device.  # noqa: E501

        :return: The vendor of this Properties.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Properties.

        Vendor of the device.  # noqa: E501

        :param vendor: The vendor of this Properties.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Properties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Properties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Properties):
            return True

        return self.to_dict() != other.to_dict()
