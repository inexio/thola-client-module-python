# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class UPSComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alarm_low_voltage_disconnect': 'int',
        'battery_amperage_': 'float',
        'battery_capacity': 'float',
        'battery_current': 'float',
        'battery_remaining_time': 'float',
        'battery_temperature': 'float',
        'battery_voltage': 'float',
        'current_load': 'float',
        'mains_voltage_applied': 'bool',
        'rectifier_current': 'float',
        'system_voltage': 'float'
    }

    attribute_map = {
        'alarm_low_voltage_disconnect': 'alarm_low_voltage_disconnect',
        'battery_amperage_': 'battery_amperage ',
        'battery_capacity': 'battery_capacity',
        'battery_current': 'battery_current',
        'battery_remaining_time': 'battery_remaining_time',
        'battery_temperature': 'battery_temperature',
        'battery_voltage': 'battery_voltage',
        'current_load': 'current_load',
        'mains_voltage_applied': 'mains_voltage_applied',
        'rectifier_current': 'rectifier_current',
        'system_voltage': 'system_voltage'
    }

    def __init__(self, alarm_low_voltage_disconnect=None, battery_amperage_=None, battery_capacity=None, battery_current=None, battery_remaining_time=None, battery_temperature=None, battery_voltage=None, current_load=None, mains_voltage_applied=None, rectifier_current=None, system_voltage=None, _configuration=None):  # noqa: E501
        """UPSComponent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alarm_low_voltage_disconnect = None
        self._battery_amperage_ = None
        self._battery_capacity = None
        self._battery_current = None
        self._battery_remaining_time = None
        self._battery_temperature = None
        self._battery_voltage = None
        self._current_load = None
        self._mains_voltage_applied = None
        self._rectifier_current = None
        self._system_voltage = None
        self.discriminator = None

        if alarm_low_voltage_disconnect is not None:
            self.alarm_low_voltage_disconnect = alarm_low_voltage_disconnect
        if battery_amperage_ is not None:
            self.battery_amperage_ = battery_amperage_
        if battery_capacity is not None:
            self.battery_capacity = battery_capacity
        if battery_current is not None:
            self.battery_current = battery_current
        if battery_remaining_time is not None:
            self.battery_remaining_time = battery_remaining_time
        if battery_temperature is not None:
            self.battery_temperature = battery_temperature
        if battery_voltage is not None:
            self.battery_voltage = battery_voltage
        if current_load is not None:
            self.current_load = current_load
        if mains_voltage_applied is not None:
            self.mains_voltage_applied = mains_voltage_applied
        if rectifier_current is not None:
            self.rectifier_current = rectifier_current
        if system_voltage is not None:
            self.system_voltage = system_voltage

    @property
    def alarm_low_voltage_disconnect(self):
        """Gets the alarm_low_voltage_disconnect of this UPSComponent.  # noqa: E501


        :return: The alarm_low_voltage_disconnect of this UPSComponent.  # noqa: E501
        :rtype: int
        """
        return self._alarm_low_voltage_disconnect

    @alarm_low_voltage_disconnect.setter
    def alarm_low_voltage_disconnect(self, alarm_low_voltage_disconnect):
        """Sets the alarm_low_voltage_disconnect of this UPSComponent.


        :param alarm_low_voltage_disconnect: The alarm_low_voltage_disconnect of this UPSComponent.  # noqa: E501
        :type: int
        """

        self._alarm_low_voltage_disconnect = alarm_low_voltage_disconnect

    @property
    def battery_amperage_(self):
        """Gets the battery_amperage_ of this UPSComponent.  # noqa: E501


        :return: The battery_amperage_ of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._battery_amperage_

    @battery_amperage_.setter
    def battery_amperage_(self, battery_amperage_):
        """Sets the battery_amperage_ of this UPSComponent.


        :param battery_amperage_: The battery_amperage_ of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._battery_amperage_ = battery_amperage_

    @property
    def battery_capacity(self):
        """Gets the battery_capacity of this UPSComponent.  # noqa: E501


        :return: The battery_capacity of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._battery_capacity

    @battery_capacity.setter
    def battery_capacity(self, battery_capacity):
        """Sets the battery_capacity of this UPSComponent.


        :param battery_capacity: The battery_capacity of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._battery_capacity = battery_capacity

    @property
    def battery_current(self):
        """Gets the battery_current of this UPSComponent.  # noqa: E501


        :return: The battery_current of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._battery_current

    @battery_current.setter
    def battery_current(self, battery_current):
        """Sets the battery_current of this UPSComponent.


        :param battery_current: The battery_current of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._battery_current = battery_current

    @property
    def battery_remaining_time(self):
        """Gets the battery_remaining_time of this UPSComponent.  # noqa: E501


        :return: The battery_remaining_time of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._battery_remaining_time

    @battery_remaining_time.setter
    def battery_remaining_time(self, battery_remaining_time):
        """Sets the battery_remaining_time of this UPSComponent.


        :param battery_remaining_time: The battery_remaining_time of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._battery_remaining_time = battery_remaining_time

    @property
    def battery_temperature(self):
        """Gets the battery_temperature of this UPSComponent.  # noqa: E501


        :return: The battery_temperature of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._battery_temperature

    @battery_temperature.setter
    def battery_temperature(self, battery_temperature):
        """Sets the battery_temperature of this UPSComponent.


        :param battery_temperature: The battery_temperature of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._battery_temperature = battery_temperature

    @property
    def battery_voltage(self):
        """Gets the battery_voltage of this UPSComponent.  # noqa: E501


        :return: The battery_voltage of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._battery_voltage

    @battery_voltage.setter
    def battery_voltage(self, battery_voltage):
        """Sets the battery_voltage of this UPSComponent.


        :param battery_voltage: The battery_voltage of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._battery_voltage = battery_voltage

    @property
    def current_load(self):
        """Gets the current_load of this UPSComponent.  # noqa: E501


        :return: The current_load of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._current_load

    @current_load.setter
    def current_load(self, current_load):
        """Sets the current_load of this UPSComponent.


        :param current_load: The current_load of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._current_load = current_load

    @property
    def mains_voltage_applied(self):
        """Gets the mains_voltage_applied of this UPSComponent.  # noqa: E501


        :return: The mains_voltage_applied of this UPSComponent.  # noqa: E501
        :rtype: bool
        """
        return self._mains_voltage_applied

    @mains_voltage_applied.setter
    def mains_voltage_applied(self, mains_voltage_applied):
        """Sets the mains_voltage_applied of this UPSComponent.


        :param mains_voltage_applied: The mains_voltage_applied of this UPSComponent.  # noqa: E501
        :type: bool
        """

        self._mains_voltage_applied = mains_voltage_applied

    @property
    def rectifier_current(self):
        """Gets the rectifier_current of this UPSComponent.  # noqa: E501


        :return: The rectifier_current of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._rectifier_current

    @rectifier_current.setter
    def rectifier_current(self, rectifier_current):
        """Sets the rectifier_current of this UPSComponent.


        :param rectifier_current: The rectifier_current of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._rectifier_current = rectifier_current

    @property
    def system_voltage(self):
        """Gets the system_voltage of this UPSComponent.  # noqa: E501


        :return: The system_voltage of this UPSComponent.  # noqa: E501
        :rtype: float
        """
        return self._system_voltage

    @system_voltage.setter
    def system_voltage(self, system_voltage):
        """Sets the system_voltage of this UPSComponent.


        :param system_voltage: The system_voltage of this UPSComponent.  # noqa: E501
        :type: float
        """

        self._system_voltage = system_voltage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UPSComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UPSComponent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UPSComponent):
            return True

        return self.to_dict() != other.to_dict()
