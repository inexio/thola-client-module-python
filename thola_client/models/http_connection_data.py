# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class HTTPConnectionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_password': 'str',
        'auth_username': 'str',
        'http_ports': 'list[int]',
        'https_ports': 'list[int]'
    }

    attribute_map = {
        'auth_password': 'auth_password',
        'auth_username': 'auth_username',
        'http_ports': 'http_ports',
        'https_ports': 'https_ports'
    }

    def __init__(self, auth_password=None, auth_username=None, http_ports=None, https_ports=None, _configuration=None):  # noqa: E501
        """HTTPConnectionData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_password = None
        self._auth_username = None
        self._http_ports = None
        self._https_ports = None
        self.discriminator = None

        if auth_password is not None:
            self.auth_password = auth_password
        if auth_username is not None:
            self.auth_username = auth_username
        if http_ports is not None:
            self.http_ports = http_ports
        if https_ports is not None:
            self.https_ports = https_ports

    @property
    def auth_password(self):
        """Gets the auth_password of this HTTPConnectionData.  # noqa: E501

        The password for authorization on the device.  # noqa: E501

        :return: The auth_password of this HTTPConnectionData.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this HTTPConnectionData.

        The password for authorization on the device.  # noqa: E501

        :param auth_password: The auth_password of this HTTPConnectionData.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def auth_username(self):
        """Gets the auth_username of this HTTPConnectionData.  # noqa: E501

        The username for authorization on the device.  # noqa: E501

        :return: The auth_username of this HTTPConnectionData.  # noqa: E501
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this HTTPConnectionData.

        The username for authorization on the device.  # noqa: E501

        :param auth_username: The auth_username of this HTTPConnectionData.  # noqa: E501
        :type: str
        """

        self._auth_username = auth_username

    @property
    def http_ports(self):
        """Gets the http_ports of this HTTPConnectionData.  # noqa: E501

        The http port(s) of the device.  # noqa: E501

        :return: The http_ports of this HTTPConnectionData.  # noqa: E501
        :rtype: list[int]
        """
        return self._http_ports

    @http_ports.setter
    def http_ports(self, http_ports):
        """Sets the http_ports of this HTTPConnectionData.

        The http port(s) of the device.  # noqa: E501

        :param http_ports: The http_ports of this HTTPConnectionData.  # noqa: E501
        :type: list[int]
        """

        self._http_ports = http_ports

    @property
    def https_ports(self):
        """Gets the https_ports of this HTTPConnectionData.  # noqa: E501

        The https port(s) of the device.  # noqa: E501

        :return: The https_ports of this HTTPConnectionData.  # noqa: E501
        :rtype: list[int]
        """
        return self._https_ports

    @https_ports.setter
    def https_ports(self, https_ports):
        """Sets the https_ports of this HTTPConnectionData.

        The https port(s) of the device.  # noqa: E501

        :param https_ports: The https_ports of this HTTPConnectionData.  # noqa: E501
        :type: list[int]
        """

        self._https_ports = https_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HTTPConnectionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HTTPConnectionData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HTTPConnectionData):
            return True

        return self.to_dict() != other.to_dict()
