# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class RadioInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level_in': 'int',
        'level_out': 'int',
        'maxbitrate_in': 'int',
        'maxbitrate_out': 'int'
    }

    attribute_map = {
        'level_in': 'level_in',
        'level_out': 'level_out',
        'maxbitrate_in': 'maxbitrate_in',
        'maxbitrate_out': 'maxbitrate_out'
    }

    def __init__(self, level_in=None, level_out=None, maxbitrate_in=None, maxbitrate_out=None, _configuration=None):  # noqa: E501
        """RadioInterface - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._level_in = None
        self._level_out = None
        self._maxbitrate_in = None
        self._maxbitrate_out = None
        self.discriminator = None

        if level_in is not None:
            self.level_in = level_in
        if level_out is not None:
            self.level_out = level_out
        if maxbitrate_in is not None:
            self.maxbitrate_in = maxbitrate_in
        if maxbitrate_out is not None:
            self.maxbitrate_out = maxbitrate_out

    @property
    def level_in(self):
        """Gets the level_in of this RadioInterface.  # noqa: E501


        :return: The level_in of this RadioInterface.  # noqa: E501
        :rtype: int
        """
        return self._level_in

    @level_in.setter
    def level_in(self, level_in):
        """Sets the level_in of this RadioInterface.


        :param level_in: The level_in of this RadioInterface.  # noqa: E501
        :type: int
        """

        self._level_in = level_in

    @property
    def level_out(self):
        """Gets the level_out of this RadioInterface.  # noqa: E501


        :return: The level_out of this RadioInterface.  # noqa: E501
        :rtype: int
        """
        return self._level_out

    @level_out.setter
    def level_out(self, level_out):
        """Sets the level_out of this RadioInterface.


        :param level_out: The level_out of this RadioInterface.  # noqa: E501
        :type: int
        """

        self._level_out = level_out

    @property
    def maxbitrate_in(self):
        """Gets the maxbitrate_in of this RadioInterface.  # noqa: E501


        :return: The maxbitrate_in of this RadioInterface.  # noqa: E501
        :rtype: int
        """
        return self._maxbitrate_in

    @maxbitrate_in.setter
    def maxbitrate_in(self, maxbitrate_in):
        """Sets the maxbitrate_in of this RadioInterface.


        :param maxbitrate_in: The maxbitrate_in of this RadioInterface.  # noqa: E501
        :type: int
        """

        self._maxbitrate_in = maxbitrate_in

    @property
    def maxbitrate_out(self):
        """Gets the maxbitrate_out of this RadioInterface.  # noqa: E501


        :return: The maxbitrate_out of this RadioInterface.  # noqa: E501
        :rtype: int
        """
        return self._maxbitrate_out

    @maxbitrate_out.setter
    def maxbitrate_out(self, maxbitrate_out):
        """Sets the maxbitrate_out of this RadioInterface.


        :param maxbitrate_out: The maxbitrate_out of this RadioInterface.  # noqa: E501
        :type: int
        """

        self._maxbitrate_out = maxbitrate_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RadioInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadioInterface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RadioInterface):
            return True

        return self.to_dict() != other.to_dict()
