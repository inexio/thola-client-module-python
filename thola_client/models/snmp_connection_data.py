# coding: utf-8

"""
    Thola

    REST API for Thola.  For more information look at our Github : https://github.com/inexio/thola  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thola_client.configuration import Configuration


class SNMPConnectionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'communities': 'list[str]',
        'discover_parallel_requests': 'int',
        'discover_retries': 'int',
        'discover_timeout': 'int',
        'ports': 'list[int]',
        'versions': 'list[str]'
    }

    attribute_map = {
        'communities': 'communities',
        'discover_parallel_requests': 'discoverParallelRequests',
        'discover_retries': 'discoverRetries',
        'discover_timeout': 'discoverTimeout',
        'ports': 'ports',
        'versions': 'versions'
    }

    def __init__(self, communities=None, discover_parallel_requests=None, discover_retries=None, discover_timeout=None, ports=None, versions=None, _configuration=None):  # noqa: E501
        """SNMPConnectionData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._communities = None
        self._discover_parallel_requests = None
        self._discover_retries = None
        self._discover_timeout = None
        self._ports = None
        self._versions = None
        self.discriminator = None

        if communities is not None:
            self.communities = communities
        if discover_parallel_requests is not None:
            self.discover_parallel_requests = discover_parallel_requests
        if discover_retries is not None:
            self.discover_retries = discover_retries
        if discover_timeout is not None:
            self.discover_timeout = discover_timeout
        if ports is not None:
            self.ports = ports
        if versions is not None:
            self.versions = versions

    @property
    def communities(self):
        """Gets the communities of this SNMPConnectionData.  # noqa: E501

        The snmp community string(s) for the device.  # noqa: E501

        :return: The communities of this SNMPConnectionData.  # noqa: E501
        :rtype: list[str]
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this SNMPConnectionData.

        The snmp community string(s) for the device.  # noqa: E501

        :param communities: The communities of this SNMPConnectionData.  # noqa: E501
        :type: list[str]
        """

        self._communities = communities

    @property
    def discover_parallel_requests(self):
        """Gets the discover_parallel_requests of this SNMPConnectionData.  # noqa: E501

        The amount of parallel connection requests used while trying to get a valid SNMP connection.  # noqa: E501

        :return: The discover_parallel_requests of this SNMPConnectionData.  # noqa: E501
        :rtype: int
        """
        return self._discover_parallel_requests

    @discover_parallel_requests.setter
    def discover_parallel_requests(self, discover_parallel_requests):
        """Sets the discover_parallel_requests of this SNMPConnectionData.

        The amount of parallel connection requests used while trying to get a valid SNMP connection.  # noqa: E501

        :param discover_parallel_requests: The discover_parallel_requests of this SNMPConnectionData.  # noqa: E501
        :type: int
        """

        self._discover_parallel_requests = discover_parallel_requests

    @property
    def discover_retries(self):
        """Gets the discover_retries of this SNMPConnectionData.  # noqa: E501

        The retries used while trying to get a valid SNMP connection.  # noqa: E501

        :return: The discover_retries of this SNMPConnectionData.  # noqa: E501
        :rtype: int
        """
        return self._discover_retries

    @discover_retries.setter
    def discover_retries(self, discover_retries):
        """Sets the discover_retries of this SNMPConnectionData.

        The retries used while trying to get a valid SNMP connection.  # noqa: E501

        :param discover_retries: The discover_retries of this SNMPConnectionData.  # noqa: E501
        :type: int
        """

        self._discover_retries = discover_retries

    @property
    def discover_timeout(self):
        """Gets the discover_timeout of this SNMPConnectionData.  # noqa: E501

        The timeout in seconds used while trying to get a valid SNMP connection.  # noqa: E501

        :return: The discover_timeout of this SNMPConnectionData.  # noqa: E501
        :rtype: int
        """
        return self._discover_timeout

    @discover_timeout.setter
    def discover_timeout(self, discover_timeout):
        """Sets the discover_timeout of this SNMPConnectionData.

        The timeout in seconds used while trying to get a valid SNMP connection.  # noqa: E501

        :param discover_timeout: The discover_timeout of this SNMPConnectionData.  # noqa: E501
        :type: int
        """

        self._discover_timeout = discover_timeout

    @property
    def ports(self):
        """Gets the ports of this SNMPConnectionData.  # noqa: E501

        The snmp port(s) of the device.  # noqa: E501

        :return: The ports of this SNMPConnectionData.  # noqa: E501
        :rtype: list[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this SNMPConnectionData.

        The snmp port(s) of the device.  # noqa: E501

        :param ports: The ports of this SNMPConnectionData.  # noqa: E501
        :type: list[int]
        """

        self._ports = ports

    @property
    def versions(self):
        """Gets the versions of this SNMPConnectionData.  # noqa: E501

        The snmp version(s) of the device.  # noqa: E501

        :return: The versions of this SNMPConnectionData.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this SNMPConnectionData.

        The snmp version(s) of the device.  # noqa: E501

        :param versions: The versions of this SNMPConnectionData.  # noqa: E501
        :type: list[str]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SNMPConnectionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SNMPConnectionData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SNMPConnectionData):
            return True

        return self.to_dict() != other.to_dict()
